Looty design doc
Critical Functions:
Add loot to the register
Retrieve loot list with sorting and filtering
player elections
conflict resolution
Report what players got what items after resolution.
Manual loot distribution intervention

Additional functions:
campaign segregation
logon and security
User management

--------------------

Add loot to the register:  Loot needs to be added by a DM.

Web-Server:
In the initial release, this DM page will be protected by a simple HTTP authentication since it's just going to be me and Mai.  The address will be Looty.com/gm

Client:
The add loot page design is not yet decided.  Value entry will be in gold pieces and converted to copper piece values in code.
Sending loot loot to the database will be a POST request against /API/loot.  The data sent will be a serialized JSON file.  The JSON file will be an array of JSON key-value pairs.  The keys will be Name, Count, and Value.  Value must be in copper pieces.
FUTURE: Campaign field so you can add loot to a particular campaign.

App-Server:
There will be an endpoint called POST /API/loot.  This API will accept an array of key-value pairs.  Keys are Name, Count, and Value representing the loot the DM wishes to add to the register.  
The app server add this loot to the database.  It will use a loop to add each item as an individual to the table.  Therefore if there are two longswords, there will be two rows added to the table.
Value is in copper pieces.  
The SQL statement will be constructed by sting concatenation and all adds will be accomplished with a single DB call.
SQL: insert into loot_register (name,value) values (item1_name, item1_value)

----------------------

Retrieve loot list: Pull loot based on requirements.
Client: 
Be ready to receive and display a huge table of information.  Any request to get a list of loot will be made against GET /API/loot.  This endpoint will allow several URL fields to support sorting, filtering, and grouping.  Initial release will be sorting  and basic filtering only.  Requests against the endpoint without fields will result in the full loot list returned in the order it was added.  
The field 'sort' will let you specify a column to sort the list by.  Sort=name will cause a table to be returned sorted by the name of the loot.  Possible sort values are name, value, claimed_by.
The field "filter" will return a table with items that match the filter.  Possible values as sold, claimed, bagged and their reverse.  Unsold, unclaimed, unbagged.
For example, the request "GET /API/loot?sort=value$filter=unclaimed" will get you a list of unclaimed loot sorted by value.
FUTURE: When specifying a filter of 'claimed' and optional field of character will be available to filter to loot claimed by a particular character.  The API will expect a number indicating the database id of the character.
FUTURE: There will be a campaign field where you can specify that you only want loot for a particular campaign.

App-Server:
The endpoint for loot retrieval will be GET /API/loot.  This URL will have the fiends of filter and sort.
The filter field will be handled by first checking if it exists.  If it does, check it against the list of possible values: sold, claimed, bagged, Unsold, unclaimed, unbagged.
FUTURE: if the filter is claimed, check for a character field to return loot claimed by a character.  If no such field exists, return all claimed loot.
The sort field will be handled by first checking if it exists.  If it does, check it against the list of possible values: name, value, claimed_by.  Name and value are trivial to add to the SQL statement.  claimed_by is trickier because if implemented naively, it'll return by character id number, not name.  We will first need to resolve the IDs into Names, then filter by that.
SQL: select * fromn loot_register
Check if there is a filter.  If there is, concantinate an appropriate WHERE clause.  (where claimed_by is null)
Check if there is a sort.  If there is, concantinate an appropriate ORDER BY clause. (order by name)
Add the ;.

-------------------

Player Elections: Players want to select loot.

Overview: Player elections will impliment the World of Warcraft need and greed system.  Players will see a table of unclaimed loot and select either need, greed, bag, sell to indicate their intentions.  Need means this player has identified the item as an upgrade or is otherwise critical to their character progression.  Expect to see this a lot for Wizards who want to claim scrolls to add to their spellbook.  Everyone will roll Need on a ring of protection.  Greed means the player has identified an item as nice to have, but not critical.  Healing potions will be common targets for need rolls.  Bag means the player has identified that this item is useful to the party as a whole and should be added to the shared bag.  Immovable rods are common for this.  Sell means that player wants to sell the item for loot.  These selections have obvious conflicts with eachother, but this is discussed later.  This section is purely about the process of players making elections, then storing those elections in the database.  Once all elections are made, the app server will resolve conflicts.  The elections table is temporary and will only story the elections for the election currently in progress.  Once the loot is divyed up, the elections table will be truncated. Any post-election reconciliation will need to be handled manually.

Client:
First get a list of unclaimed loot and show it to the player.  Name and Value.  The player should have radio buttons or a dropdown to select from their options. The default option is Sell.  The page should take the total value of all loot and devide it by the number of players, this will determine how many items the player is allowed to need and greed on.  Also track the total value of elections.
For every item they change to need or greed, increase their election value by the items value.  If they choose to bag an item, decrease their available spending by that value of the item divided by the number of players, since by bagging it, the lose it for selling.
Once all elections are made, send them to the app with POST /API/election.  Post a JSON file with an array of election key-value pairs.  The keys are item-id, player-id, selection, one for each item.
Future: in the DM area there should probably be a way to retrieve all elections in process with a GET against /API/elections.
Future: elections should be broken down by campaign.

App-Server:
Create an endpoint for POST /APT/elections.  The retrieved data will be a JSON array of JSON key-value pairs contained item-id, player-id, and selection.  Each array item is one player making one elections for one item.  
SQL: insert into election (character-id, item-id, elect) values 
Then concantinate each election made and send them to the DB as a single transation.
Then pull the elections table with SELECT COUNT (DISTINCT character-id) from elections to gut a count of how many players have made their elections.  If all players have made elections, move on to conflict resolution.

-----------------

Election conflict resolution

Overview: Conflict resolution is the meat of looty.  Multiple players may try to need the same item, so only one of them can get it. Or even more complicated, there are several copies of the same item and everyone wants one.  This will be common with potions and other consumables.  THe issues comes about with how looty handles each item individually.  If there are 5 potions, then there are five items.  if everyone needs the first one and greeds the rest, then the potions will be distributed effectively randomly.  The first need will be a random rolls from all characters, followed by the greed rolls.  Conflict resolution will happen entirely on the app server.

App-Server:
We are going to do this is passes.  The greed pass, 
After the server has determined that all elections have been made, we go into conflict resolution.  We grab a list of all distinct item id that have been bid for and use them as the key for a dictionary.  

